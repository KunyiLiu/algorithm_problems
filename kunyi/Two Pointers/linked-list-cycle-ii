################### 
"""
Definition of ListNode
class ListNode(object):
    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""

class Solution:
    """
    @param head: The first node of linked list.
    @return: The node where the cycle begins. if there is no cycle, return null
    """
    def detectCycle(self, head):
        # Floyd 2(x+y) = (x+y+z) + y => x = z
        bigger, smaller = head, head
        if head is None:
            return None 
            
        while True:
            if bigger.next is not None:
                bigger = bigger.next.next
                smaller = smaller.next 
                if bigger is None:
                    return None
                if bigger == smaller:
                    break
            else:
                return None
        
        # x = z, head walk x steps while smaller walk z steps
        while head != smaller:
            head = head.next
            smaller = smaller.next
                
        return head
  ############################
  
  class Solution:
    """
    @param head: The first node of the linked list.
    @return: the node where the cycle begins. 
                If there is no cycle, return null
    """
    def detectCycle(self, head):
        # write your code here
        if head == None or head.next == None:
            return None
        slow = fast = head      	#初始化快指针和慢指针
        while fast and fast.next:	
            slow = slow.next
            fast = fast.next.next
            if fast == slow:		#快慢指针相遇
                break
        if slow == fast:
            slow = head				#从头移动慢指针
            while slow != fast:
                slow = slow.next
                fast = fast.next
            return slow				#两指针相遇处即为环的入口
        return None
